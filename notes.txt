>>> mov = Movie(title='Test', overview='This is a test',
... release_date=datetime.now(),poster_path='blah')
>>> db.session.add(mov)
>>> db.session.commit()
2023-03-27 09:42:02,391 INFO sqlalchemy.engine.Engine BEGIN (implicit)
2023-03-27 09:42:02,392 INFO sqlalchemy.engine.Engine INSERT INTO movies (title, overview, release_date, poster_path) VALUES (%(title)s, %(overview)s, %(release_dat
e)s, %(poster_path)s) RETURNING movies.movie_id
2023-03-27 09:42:02,392 INFO sqlalchemy.engine.Engine [generated in 0.00016s] {'title': 'Test', 'overview': 'This is a test', 'release_date': datetime.datetime(2023
, 3, 27, 9, 41, 34, 677670), 'poster_path': 'blah'}
2023-03-27 09:42:02,403 INFO sqlalchemy.engine.Engine COMMIT
>>> movies = Movie.query.all()
2023-03-27 09:45:20,589 INFO sqlalchemy.engine.Engine BEGIN (implicit)
2023-03-27 09:45:20,591 INFO sqlalchemy.engine.Engine SELECT movies.movie_id AS movies_movie_id, movies.title AS movies_title, movies.overview AS movies_overview, m
ovies.release_date AS movies_release_date, movies.poster_path AS movies_poster_path
FROM movies
2023-03-27 09:45:20,591 INFO sqlalchemy.engine.Engine [generated in 0.00017s] {}
>>> movies = Movie.query.all()
2023-03-27 09:56:29,999 INFO sqlalchemy.engine.Engine SELECT movies.movie_id AS movies_movie_id, movies.title AS movies_title, movies.overview AS movies_overview, m
ovies.release_date AS movies_release_date, movies.poster_path AS movies_poster_path
FROM movies
2023-03-27 09:56:29,999 INFO sqlalchemy.engine.Engine [cached since 669.4s ago] {}
>>> movies = Movie.query.all()
2023-03-27 09:56:49,844 INFO sqlalchemy.engine.Engine SELECT movies.movie_id AS movies_movie_id, movies.title AS movies_title, movies.overview AS movies_overview, m
ovies.release_date AS movies_release_date, movies.poster_path AS movies_poster_path
FROM movies
2023-03-27 09:56:49,845 INFO sqlalchemy.engine.Engine [cached since 689.3s ago] {}
>>> movie
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
NameError: name 'movie' is not defined
>>> movies
[<Movie movie_id=1 title=Dogs Gone Wild>, <Movie movie_id=2 title=TestTwo>, <Movie movie_id=3 title=Test>]
>>> clear
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
NameError: name 'clear' is not defined
>>> clear()
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
NameError: name 'clear' is not defined
>>> Movie.query.filter_by(title = "Dogs gone wild")
<flask_sqlalchemy.BaseQuery object at 0x7f7934e12fd0>
>>> Movie.query.filter_by(title = "Dogs gone wild").one()
2023-03-27 10:04:41,725 INFO sqlalchemy.engine.Engine SELECT movies.movie_id AS movies_movie_id, movies.title AS movies_title, movies.overview AS movies_overview, m
ovies.release_date AS movies_release_date, movies.poster_path AS movies_poster_path
FROM movies
WHERE movies.title = %(title_1)s
2023-03-27 10:04:41,726 INFO sqlalchemy.engine.Engine [generated in 0.00037s] {'title_1': 'Dogs gone wild'}
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
  File "/home/adminamy/src/ratings-v2/env/lib/python3.8/site-packages/sqlalchemy/orm/query.py", line 2796, in one
    return self._iter().one()
  File "/home/adminamy/src/ratings-v2/env/lib/python3.8/site-packages/sqlalchemy/engine/result.py", line 1365, in one
    return self._only_one_row(
  File "/home/adminamy/src/ratings-v2/env/lib/python3.8/site-packages/sqlalchemy/engine/result.py", line 561, in _only_one_row
    raise exc.NoResultFound(
sqlalchemy.exc.NoResultFound: No row was found when one was required
>>> Movie.query.filter_by(title = "Dogs Gone Wild").one()
2023-03-27 10:05:11,532 INFO sqlalchemy.engine.Engine SELECT movies.movie_id AS movies_movie_id, movies.title AS movies_title, movies.overview AS movies_overview, m
ovies.release_date AS movies_release_date, movies.poster_path AS movies_poster_path
FROM movies
WHERE movies.title = %(title_1)s
2023-03-27 10:05:11,532 INFO sqlalchemy.engine.Engine [cached since 29.81s ago] {'title_1': 'Dogs Gone Wild'}
<Movie movie_id=1 title=Dogs Gone Wild>
>>> m= Movie.query.filter_by(title = "Dogs Gone Wild").one()
2023-03-27 10:05:27,906 INFO sqlalchemy.engine.Engine SELECT movies.movie_id AS movies_movie_id, movies.title AS movies_title, movies.overview AS movies_overview, m
ovies.release_date AS movies_release_date, movies.poster_path AS movies_poster_path
FROM movies
WHERE movies.title = %(title_1)s
2023-03-27 10:05:27,906 INFO sqlalchemy.engine.Engine [cached since 46.18s ago] {'title_1': 'Dogs Gone Wild'}
>>> m
<Movie movie_id=1 title=Dogs Gone Wild>
>>> m.ratings
2023-03-27 10:05:44,222 INFO sqlalchemy.engine.Engine SELECT ratings.rating_id AS ratings_rating_id, ratings.score AS ratings_score, ratings.movie_id AS ratings_mov
ie_id, ratings.user_id AS ratings_user_id
FROM ratings
WHERE %(param_1)s = ratings.movie_id
2023-03-27 10:05:44,222 INFO sqlalchemy.engine.Engine [generated in 0.00016s] {'param_1': 1}
[<Rating rating_id=1 score=5>]
>>> movie.ratings
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
NameError: name 'movie' is not defined
>>> movie.ratings[0]
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
NameError: name 'movie' is not defined
>>> m.ratings[0]
<Rating rating_id=1 score=5>
>>> m.ratings.movie_id
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
AttributeError: 'InstrumentedList' object has no attribute 'movie_id'
>>> m.ratings[0].movie_id
1
>>> m.ratings[0].movie
<Movie movie_id=1 title=Dogs Gone Wild>



adminamy@wesley:~/src/data-modeling-demo$ source env/bin/activate
(env) adminamy@wesley:~/src/data-modeling-demo$ python3 -i many_to_many.py
NOTICE:  database "many-to-many" does not exist, skipping
[<Comment id=1 body=I loved it...>, <Comment id=2 body=A lot bett...>, <Comment id=[<Comment id=1 body=I l[<Comment id=1 body=I loved it...>, <Comment id=2 body=A lot bett...>, <Comment id=3 body=I hated it...>]
>>> babe = Book(title="Babe!")
>>> babe
<Book title=Babe!>
>>> jane = User(email="jane@j")
>>> fred = User(email="fred@f")
>>> jane
<User id=None email=jane@j>
>>> fred
<User id=None email=fred@f>
>>> hamlet.id
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
AttributeError: 'Book' object has no attribute 'id'
>>> hamlet.book_id
1
>>> babe.book_id
>>> comment1 = Comment(book=babe, user=jane, body="5 stars")
>>> comment1.book
<Book title=Babe!>
>>> comment1.user
<User id=None email=jane@j>
>>> db.session.add(comment1)
>>> db.session.commit()
>>> db.session.add(jane)
>>> db.session.commit()
>>> db.session.add(fred)
>>> db.session.commit()
>>> db.session.add(babe)
>>> db.session.commit()
>>> jane.comments.append(Comment(book=hamlet, body="What is up with this garbaj?"))
>>> hemlet.comments.appedn(Comment(user=fred, body="What Jane said!"))
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
NameError: name 'hemlet' is not defined
>>> hamlet.comments.appedn(Comment(user=fred, body="What Jane said!"))
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
AttributeError: 'InstrumentedList' object has no attribute 'appedn'
>>> hamlet.comments.append(Comment(user=fred, body="What Jane said!"))
>>> jane.comments
[<Comment id=4 body=5 stars...>, <Comment id=5 body=What is up...>]
>>> fred.comments
[<Comment id=6 body=What Jane ...>]
>>> db.session.new
IdentitySet([])
>>> db.session.add(hamlet)
>>> db.session.commit()
>>> db.session.new
IdentitySet([])
>>> comments = Book.get_by_title("Hamlet").comments
>>> print(comments)
[<Comment id=1 body=I loved it...>, <Comment id=2 body=A lot bett...>, <Comment id=3 body=I hated it...>,
<Comment id=5 body=What is up...>, <Comment id=6 body=What Jane ...>]
>>> assert len(comments) == 2
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
AssertionError
>>> assert len(comments) == 5
>>> assert len(comments) == 8
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
AssertionError
>>> dragons = Book(title="How to Train Your Dragon")
>>> dragons
<Book title=How to Train Your Dragon>
>>> doggoss = Book(title="How to Train Your Dog!")
>>> doggos
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
NameError: name 'doggos' is not defined
>>> doggoss
<Book title=How to Train Your Dog!>
>>> amelia = User("amy@amelia.com")
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
TypeError: __init__() takes 1 positional argument but 2 were given
>>> amelia = User(email="amy@amelia.com")
>>> amelia
<User id=None email=amy@amelia.com>
>>> amelia.comments.appen(book=dragons, body="Been a fav since 2010!")
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
AttributeError: 'InstrumentedList' object has no attribute 'appen'
>>> amelia.comments.append(book=dragons, body="Been a fav since 2010!")
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
TypeError: append() got an unexpected keyword argument 'book'
>>> amelia.comments.append(Comment(book=dragons, body="Been a fav since 2010!"))
>>> amelia.comments.append(Comment(book=doggoss, body="Helped me make my boxers into babies!"))
>>> db.session.add(amelia)
>>> db.session.add(dragons)
>>> db.session.add(doggoss)
>>> db.session.commit()

>>> test=Book.query.filter_by(title="Hamlet")
>>> test.all
<bound method Query.all of <flask_sqlalchemy.BaseQuery object at 0x7f9788ffde20>>
>>> test.one()
<Book title=Hamlet>
>>> test.all()
[<Book title=Hamlet>]